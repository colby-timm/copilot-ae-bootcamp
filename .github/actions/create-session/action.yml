name: 'Create Session Branch'
description: 'Creates a session branch with all necessary files and configurations'
inputs:
  session_number:
    description: 'Session number (1-6)'
    required: true
  session_topic:
    description: 'Topic of the session'
    required: true
  force_recreate:
    description: 'Force recreate if branch exists'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Check if session branch exists
      id: check_branch
      shell: bash
      run: |
        if git show-ref --verify --quiet refs/remotes/origin/session${{ inputs.session_number }}; then
          echo "branch_exists=true" >> $GITHUB_OUTPUT
          echo "Branch session${{ inputs.session_number }} already exists"
        else
          echo "branch_exists=false" >> $GITHUB_OUTPUT
          echo "Branch session${{ inputs.session_number }} does not exist"
        fi

    - name: Handle existing branch
      if: steps.check_branch.outputs.branch_exists == 'true' && inputs.force_recreate == 'true'
      shell: bash
      run: |
        git push origin --delete session${{ inputs.session_number }} || true
        echo "Deleted existing branch session${{ inputs.session_number }}"

    - name: Handle existing branch (no force)
      if: steps.check_branch.outputs.branch_exists == 'true' && inputs.force_recreate == 'false'
      shell: bash
      run: |
        echo "::error::Branch session${{ inputs.session_number }} already exists. Use force_recreate=true to overwrite."
        exit 1

    - name: Validate session directory exists
      shell: bash
      run: |
        if [ ! -d "sessions/session${{ inputs.session_number }}" ]; then
          echo "::error::Session directory sessions/session${{ inputs.session_number }} not found"
          exit 1
        fi
        echo "‚úÖ Session ${{ inputs.session_number }} directory found"

    - name: Create session branch and copy files
      shell: bash
      run: |
        SESSION_NUM=${{ inputs.session_number }}

        # Debug: Show what's in the session directory
        echo "üìÅ Contents of sessions/session$SESSION_NUM:"
        ls -la sessions/session$SESSION_NUM/

        # Create temporary directory to store session content
        mkdir -p /tmp/session-content

        # Copy session content to temp location (including hidden files)
        shopt -s dotglob
        cp -r sessions/session$SESSION_NUM/* /tmp/session-content/

        echo "üìÅ Session content stored in temp location"

        # Create and switch to new session branch
        git checkout -b session$SESSION_NUM

        # Clear everything from the branch (except .git)
        find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +

        # Copy session-specific content from temp to root
        cp -r /tmp/session-content/* .

        # Debug: Show what's now in the root
        echo "üìÅ Contents of root after copy:"
        ls -la .

        # Clean up temp directory
        rm -rf /tmp/session-content

        # Stage all changes
        git add -A

        # Commit everything at once
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git commit -m "Initialize Session ${{ inputs.session_number }}

        Session ${{ inputs.session_number }}: ${{ inputs.session_topic }}
        All session files copied to branch root"

        echo "‚úÖ Session files copied to branch root"

    - name: Push session branch
      shell: bash
      run: |
        git push origin session${{ inputs.session_number }}

    - name: Enable initial workflow
      shell: bash
      run: |
        # Wait a moment for the push to be processed
        sleep 5
        
        # Trigger the session workflow via repository dispatch
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"session${{ inputs.session_number }}-created","client_payload":{"session_number":"${{ inputs.session_number }}"}}'
        
        echo "Triggered session${{ inputs.session_number }} workflow via repository dispatch"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
